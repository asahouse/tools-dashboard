/*
 * This file is generated by jOOQ.
*/
package org.codeworks.web.tools.dashboard.myspace.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.codeworks.web.tools.dashboard.myspace.jooq.Keys;
import org.codeworks.web.tools.dashboard.myspace.jooq.Myspace2;
import org.codeworks.web.tools.dashboard.myspace.jooq.tables.records.AttachmentRecord;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Attachment extends TableImpl<AttachmentRecord> {

    private static final long serialVersionUID = -1907466086;

    /**
     * The reference instance of <code>myspace2.attachment</code>
     */
    public static final Attachment ATTACHMENT = new Attachment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AttachmentRecord> getRecordType() {
        return AttachmentRecord.class;
    }

    /**
     * The column <code>myspace2.attachment.id</code>.
     */
    public final TableField<AttachmentRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>myspace2.attachment.attKey</code>.
     */
    public final TableField<AttachmentRecord, String> ATTKEY = createField("attKey", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>myspace2.attachment.attName</code>.
     */
    public final TableField<AttachmentRecord, String> ATTNAME = createField("attName", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>myspace2.attachment.type</code>.
     */
    public final TableField<AttachmentRecord, Integer> TYPE = createField("type", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>myspace2.attachment.createTime</code>.
     */
    public final TableField<AttachmentRecord, Timestamp> CREATETIME = createField("createTime", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>myspace2.attachment</code> table reference
     */
    public Attachment() {
        this("attachment", null);
    }

    /**
     * Create an aliased <code>myspace2.attachment</code> table reference
     */
    public Attachment(String alias) {
        this(alias, ATTACHMENT);
    }

    private Attachment(String alias, Table<AttachmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Attachment(String alias, Table<AttachmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Myspace2.MYSPACE2;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AttachmentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ATTACHMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AttachmentRecord> getPrimaryKey() {
        return Keys.KEY_ATTACHMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AttachmentRecord>> getKeys() {
        return Arrays.<UniqueKey<AttachmentRecord>>asList(Keys.KEY_ATTACHMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Attachment as(String alias) {
        return new Attachment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Attachment rename(String name) {
        return new Attachment(name, null);
    }
}
