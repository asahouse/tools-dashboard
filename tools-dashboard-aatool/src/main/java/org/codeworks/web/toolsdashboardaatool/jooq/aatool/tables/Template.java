/*
 * This file is generated by jOOQ.
*/
package org.codeworks.web.toolsdashboardaatool.jooq.aatool.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.codeworks.web.toolsdashboardaatool.jooq.aatool.Aatool;
import org.codeworks.web.toolsdashboardaatool.jooq.aatool.Keys;
import org.codeworks.web.toolsdashboardaatool.jooq.aatool.tables.records.TemplateRecord;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Template extends TableImpl<TemplateRecord> {

    private static final long serialVersionUID = 798617125;

    /**
     * The reference instance of <code>aatool.template</code>
     */
    public static final Template TEMPLATE = new Template();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TemplateRecord> getRecordType() {
        return TemplateRecord.class;
    }

    /**
     * The column <code>aatool.template.id</code>.
     */
    public final TableField<TemplateRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>aatool.template.name</code>.
     */
    public final TableField<TemplateRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>aatool.template.sequence</code>.
     */
    public final TableField<TemplateRecord, Integer> SEQUENCE = createField("sequence", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>aatool.template.title</code>.
     */
    public final TableField<TemplateRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>aatool.template.location</code>.
     */
    public final TableField<TemplateRecord, String> LOCATION = createField("location", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>aatool.template.digest</code>.
     */
    public final TableField<TemplateRecord, String> DIGEST = createField("digest", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>aatool.template.applyDeadline</code>.
     */
    public final TableField<TemplateRecord, LocalDateTime> APPLYDEADLINE = createField("applyDeadline", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>aatool.template.startTime</code>.
     */
    public final TableField<TemplateRecord, LocalDateTime> STARTTIME = createField("startTime", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>aatool.template.endTime</code>.
     */
    public final TableField<TemplateRecord, LocalDateTime> ENDTIME = createField("endTime", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>aatool.template.limit</code>.
     */
    public final TableField<TemplateRecord, Integer> LIMIT = createField("limit", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("-1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>aatool.template.coverImageKey</code>.
     */
    public final TableField<TemplateRecord, String> COVERIMAGEKEY = createField("coverImageKey", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>aatool.template.chargeImageKey</code>.
     */
    public final TableField<TemplateRecord, String> CHARGEIMAGEKEY = createField("chargeImageKey", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>aatool.template.content</code>.
     */
    public final TableField<TemplateRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>aatool.template.canCoverWorkshop</code>.
     */
    public final TableField<TemplateRecord, Integer> CANCOVERWORKSHOP = createField("canCoverWorkshop", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>aatool.template.isCharge</code>.
     */
    public final TableField<TemplateRecord, Integer> ISCHARGE = createField("isCharge", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>aatool.template.status</code>.
     */
    public final TableField<TemplateRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>aatool.template.createTime</code>.
     */
    public final TableField<TemplateRecord, LocalDateTime> CREATETIME = createField("createTime", org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>aatool.template</code> table reference
     */
    public Template() {
        this("template", null);
    }

    /**
     * Create an aliased <code>aatool.template</code> table reference
     */
    public Template(String alias) {
        this(alias, TEMPLATE);
    }

    private Template(String alias, Table<TemplateRecord> aliased) {
        this(alias, aliased, null);
    }

    private Template(String alias, Table<TemplateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Aatool.AATOOL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TemplateRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TEMPLATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TemplateRecord> getPrimaryKey() {
        return Keys.KEY_TEMPLATE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TemplateRecord>> getKeys() {
        return Arrays.<UniqueKey<TemplateRecord>>asList(Keys.KEY_TEMPLATE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Template as(String alias) {
        return new Template(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Template rename(String name) {
        return new Template(name, null);
    }
}
